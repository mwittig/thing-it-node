0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.5.1
3 info using node@v0.12.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/marcgille/git/thing-it-node',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/marcgille/.npm/thing-it-node/0.9.77/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/marcgille/.npm/thing-it-node/0.9.77/package.tgz',
9 verbose tar pack   '/Users/marcgille/git/thing-it-node' ]
10 verbose tarball /Users/marcgille/.npm/thing-it-node/0.9.77/package.tgz
11 verbose folder /Users/marcgille/git/thing-it-node
12 info prepublish thing-it-node@0.9.77
13 verbose addLocalTarball adding from inside cache /Users/marcgille/.npm/thing-it-node/0.9.77/package.tgz
14 silly cache afterAdd thing-it-node@0.9.77
15 verbose afterAdd /Users/marcgille/.npm/thing-it-node/0.9.77/package/package.json not in flight; writing
16 verbose afterAdd /Users/marcgille/.npm/thing-it-node/0.9.77/package/package.json written
17 silly publish { name: 'thing-it-node',
17 silly publish   version: '0.9.77',
17 silly publish   description: 'thing-it Node Server',
17 silly publish   main: 'lib/node.js',
17 silly publish   scripts: {},
17 silly publish   authors: 'Marc Gille, Julian Seibert, Neil Palmer',
17 silly publish   license: 'MIT, EPL',
17 silly publish   dependencies:
17 silly publish    { 'body-parser': '^1.11.0',
17 silly publish      cors: '^2.5.3',
17 silly publish      express: '^4.11.2',
17 silly publish      'johnny-five': '^0.8.42',
17 silly publish      lodash: '^3.1.0',
17 silly publish      moment: '^2.9.0',
17 silly publish      net: '^1.0.2',
17 silly publish      q: '^1.1.2',
17 silly publish      'socket.io': '^1.3.3',
17 silly publish      'socket.io-client': '^1.3.5' },
17 silly publish   _shasum: '17bb410ea446fb50bec2573790b1bee11ad70fc5',
17 silly publish   _from: '.',
17 silly publish   directories: { example: 'examples', test: 'test' },
17 silly publish   devDependencies: {},
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'https://github.com/marcgille/thing-it-node' },
17 silly publish   keywords:
17 silly publish    [ 'IoT',
17 silly publish      'nodejs',
17 silly publish      'REST',
17 silly publish      'WebSocket',
17 silly publish      'Actor Animation',
17 silly publish      'Arduino',
17 silly publish      'BeagleBone Black',
17 silly publish      'Raspberry Pi' ],
17 silly publish   bugs: { url: 'https://github.com/marcgille/thing-it-node/issues' },
17 silly publish   homepage: 'https://github.com/marcgille/thing-it-node',
17 silly publish   readme: '**[thing-it-node]** allows you to \n\n* connect multiple devices like an Arduino Uno with Actors and Sensors or a Bluetooth-enabled Wristband to your node computer (e.g. a regular server, a Raspberry Pi or a BeagleBone Black) to centralize **Internet access** to a **distributed, scalable set of Sensors and Actors**, \n* invoke **REST Services** on all Actors, \n* receive **WebSocket Notifications** on all Sensor data changes and events,\n* define **Higher-level REST Services** to control multiple Actors,\n* define **Complex Event Processing** to react on Sensor events and data changes,\n* define **Storyboards** for the timeline-based, animation of Actor State Changes (e.g. for robotics),\n* define **Jobs** for calendar-based, recurring execution of Services or Storyboards,\n* define **Complex Data Variables** to persistently store Event Data for later evaluation and\n* use a **Mobile Client** to control your devices.\n\nAll of the above is controlled by a [nodejs](http://nodejs.org/) server which is bootstrapped from a **simple JSON configuration**, which allows you to configure a **home automation system in minutes**.\n\n<p align="center"><a href="./documentation/images/architecture.png"><img src="./documentation/images/architecture.png" width="80%" height="80%"></a></p>\n\nMore details can be found on the [thing-it-node Wiki](https://github.com/marcgille/thing-it-node/wiki).\n\n# thing-it.com\n\nYou can use [www.thing-it.com](http://www.thing-it.com) to create and simulate your setup for **[thing-it-node]** and then just download the configuration file.\n\n# Dual License\n\n**[thing-it-node]** is available under the [MIT License](./thing-it-node/license.mit) and the [Eclipse Public License](https://eclipse.org/org/documents/epl-v10.html).\n\n# Philosophy\n\n**[thing-it-node]** is created because we felt the need for a scalable management entity which bridges Internet services and multiple, possibly heterogenous devices. It is not intended to compete with, but rather complement and use great libraries and frameworks like\n\n* [Fritzing](http://fritzing.org/) by FH Potsdam,\n* [Johnny Five](https://github.com/rwaldron/johnny-five/wiki/Board) by Rick Waldron or\n* [aREST](https://github.com/marcoschwartz/aREST) by Marco Schwarz.\n\n# Getting Started\n\n## The Scenario\n\nLet\'s set up a simple - but not too simple - home automation scenario:\n\n1. Two LEDs representing e.g. two lamps (you could actually immediately replace the LEDs by two relays to switch lamps on and off).\n1. A Photocell to detect the ambient light in a room and event processing to switch both LEDs on if the light goes below some threshold for a while (to distinguish sunset from the Photocell being temporarily covered by your curious cat).\n1. Two buttons to toggle the state of each lamp.\n1. A simple (mobile capable) web application to toggle the state of both lamps individually and together - alternatively to using the buttons - and to display the event under 2.\n\n## Installing, Configuring and Running [thing-it-node]\n\nTo install, configure and run  **[thing-it-node]**, first install\n\n* [Python](https://www.python.org/downloads/)\n\nand then\n\t\n* [nodejs](http://nodejs.org/download/)\n \non your computer (e.g. your PC or your Raspberry Pi). \n\nThen install **[thing-it-node]**:\n\n```\nmkdir -p <installDir>/node_modules\nnpm install --prefix <installDir> thing-it-node\n```\n\nwhich will install **[thing-it-node]** in the directory **_&lt;installDir&gt;_/node_modules**.\n\nThe options file **_&lt;installDir&gt;_/node_modules/options.js** is already configured as\n\n```javascript\nnodeConfigurationFile : "./examples/simple-lighting/configuration.json"\n```\n\nso that the **[thing-it-node]** server will be booted against the Configuration File for our simple lighting scenario.\n\nIf you are interested, have a look at the [configuration file](./thing-it-node/examples/simple-lighting/configuration.json) - the content should be self-explanatory.\n\nProbably the most interesting part is the definition of the Photocell \n\n```javascript\n{\n       "id": "photocell1",\n       "label": "Photocell 1",\n       "type": "photocell",\n       "configuration": {\n       "pin": "A0",\n       "rate": 2000\n       }\n}\n```\n\nand the Event Processing for the same\n\n```javascript\n{\n       "id": "eventProcessor3",\n       "label": "Event Processor 3",\n       "observables": ["arduino1.photocell1"],\n       "window" : {"duration": 10000},\n       "match" : "minimum(arduino1.photocell1.series) < 700 && deviation(arduino1.photocell1.series) < 100 && arduino1.photocell1.series.length > 1",\n       "script": "arduino1.led1.on(); arduino1.led2.on();"\n}\n```\n\nwhich ensures that the setup only reacts to a slow, consistent reduction of the ambient light.\n\nStart the **[thing-it-node]** from **_&lt;installDir&gt;_/node_modules** via\n\n`node thing-it-node.js`\n\nYou will see something like\n\n    ---------------------------------------------------------------------------\n     [thing-it-node] at http://0.0.0.0:3001\n\n\n     Node Configuration File: /Users/marcgille/git/thing-it-node/thing-it-node/examples/simple-lighting/configuration.json\n     Simulated              : true\n     Hot Deployment         : false\n     Verify Call Signature  : true\n     Public Key File        : /Users/marcgille/git/thing-it-node/thing-it-node/examples/simple-lighting/cert.pem\n     Signing Algorithm      : sha256\n\n\n     Copyright (c) 2014-2015 Marc Gille. All rights reserved.\n    -----------------------------------------------------------------------------\n\n\n    Loading plugin [arduino].\n    Starting Node [Home].\n    Actor [LED1] started.\n\t\t    Actor [LED2] started.\n\t\t    Sensor [Button 1] started.\n\t\t    Sensor [Button 2] started.\n\t\t    Sensor [Photocell 1] started.\n\t    Device [Arduino Uno 1] started.\n\t    Event Processor [Event Processor 1] listening.\n\t    Event Processor [Event Processor 2] listening.\n\t    Event Processor [Event Processor 3] listening.\n\t    Service [toggleAll] available.\n    Node [Home] started.  \n\nwhich means that your **[thing-it-node]** server found its configuration and has been started properly. It is not doing anything because the option **simulated** is set to **true** in the options file **_&lt;installDir&gt;_/options.js**. You could already use the **[thing-it-node]** Mobile Client against the simulated configuration (which you definitely would do on a new configuration), but for now we want the real thing.\n\nStop the **[thing-it-node]** Server with **CTRL-C** and change its value to\n\n```javascript\nsimulated : false\n```\n\nto prepare **[thing-it-node]** to talk to a real device - which we still have to set up.\n\n## Setting up Device, Actors and Sensors\n\nTo setup your Device you need the following hardware\n\n* an Arduino Uno board (e.g. [http://www.adafruit.com/product/50](http://www.adafruit.com/product/50)),\n* two LEDs (e.g. [https://www.sparkfun.com/products/9590](https://www.sparkfun.com/products/9590)),\n* a Photocell (e.g. [http://www.adafruit.com/product/161](http://www.adafruit.com/product/161)),\n* two buttons (e.g.),\n* possibly a breadboard (e.g. [http://www.adafruit.com/product/64](http://www.adafruit.com/product/64)) and \n* possibly some jumper wires (e.g. [http://www.adafruit.com/product/758](http://www.adafruit.com/product/758)).\n\nAll of the above is also available with Arduino Starter Kits like\n\n* the [Arduino Starter Kit](http://www.amazon.com/Arduino-Starter-Official-170-page-Projects/dp/B009UKZV0A/ref=sr_1_1?s=electronics&ie=UTF8&qid=1420481357&sr=1-1&keywords=arduino+starter+kit) or \n* the [Sparkfun Inventor\'s Kit]() or\n* the [Fritzing Creator Kit](http://shop.fritzing.org/en/a-136/).\n\nTo get the Arduino Uno connected\n\n* download and install the Arduino IDE\n* plug in your Arduino or Arduino compatible microcontroller via USB,\n* open the Arduino IDE, select: *File &raquo; Examples &raquo; Firmata &raquo; StandardFirmata*,\n* click *Upload*.\n\nIf the upload was successful, the board is now prepared. Now,\n\n* connect your Arduino Board via USB,\n* connect the LEDs to Pin 12 and 13.\n* connect the Buttons to Pin 2 and 4.\n* connect the Photocell to Pin A0.\n\ne.g. like\n\n![wiring](./examples/simple-lighting/wiring.png)\n\nRestart the **thing-it-node** server. The output should now look like \n\n    ---------------------------------------------------------------------------\n     [thing-it-node] at http://0.0.0.0:3001\n\n\n     Node Configuration File: /Users/marcgille/git/thing-it-node/thing-it-node/examples/simple-lighting/configuration.json\n     Simulated              : false\n     Hot Deployment         : false\n     Verify Call Signature  : true\n     Public Key File        : /Users/marcgille/git/thing-it-node/thing-it-node/examples/simple-lighting/cert.pem\n     Signing Algorithm      : sha256\n\n\n     Copyright (c) 2014-2015 Marc Gille. All rights reserved.\n    -----------------------------------------------------------------------------\n\n\n    Loading plugin [arduino].\n    Starting Node [Home].\n    1422043614997 Device(s) /dev/cu.usbmodem1411 \n    1422043618304 Connected /dev/cu.usbmodem1411 \n    1422043618305 Repl Initialized \n    >> \tStarting Device [Arduino Uno 1]\n \t\t    Actor [LED1] started.\n\t\t    Actor [LED2] started.\n\t\t    Sensor [Button 1] started.\n\t\t    Sensor [Button 2] started.\n\t\t    Sensor [Photocell 1] started.\n\t    Device [Arduino Uno 1] started.\n\t    Event Processor [Event Processor 1] listening.\n\t    Event Processor [Event Processor 2] listening.\n\t    Event Processor [Event Processor 3] listening.\n\t    Service [toggleAll] available.\n    Node [Home] started.\n\nYou should also be able switch both LEDs on and off via the respective buttons or switch both LEDs on by covering the Photocell for more than a few seconds.\n\n## Running the Mobile Web App\n\nConnect your browser to \n\n`http://localhost:3001/mobile/console.html`\n\nYou will see a Login Screen. _You can leave *Account* and *Password* empty for now. We will be adding security measures later._\n\nClick Login. The browser content should look like\n\n<p align="center"><a href="./documentation/images/mobile-client.png"><img src="./documentation/images/mobile-client.png" width="40%" height="40%"></a></p>\n\nIf you have remote (e.g. Wifi) access to the computer running the **[thing-it-node]**, you may also use a mobile device (e.g. an iPhone or iPad) to connect to your simple lighting system.\n\n## Summary\n\nLet us recap what we did:\n\nWith\n\n* a simple configuration file,\n* the corresponding wiring of the Arduino \n\nbut **no programming** we were able to create a simple but realistic home automation scenario.\n\n## Using thing-it.com\n\nIf you still find the creation of the configuration file too technical (we agree ...) - you may consider to use the free services of [www.thing-it.com](http://www.thing-it.com) to create and simulate your setup and then just download the configuration file.\n\nThe Simple Lighting solution presented here is available as a Mesh under\n\n[http://www.thing-it.com/thing-it/index.html?offer=54d417205a538cc81b0d31c9#/meshOfferPanel](http://www.thing-it.com/thing-it/index.html?offer=54d417205a538cc81b0d31c9#/meshOfferPanel)\n\nYou can find other Meshes in the [thing-it] [Mesh Market](http://www.thing-it.com/thing-it/index.html#/searchPanel) for free simulation and download.\n\nTo create your own solutions on [www.thing-it.com](http://www.thing-it.com) you would define **Nodes** and **Devices**\n\n<img src="./documentation/images/thing-it-node-configuration.png" style="">\n\nput **Actors**, **Sensors**, **Services** and **Event Processors** together,\n\n<img src="./documentation/images/thing-it-switchboard.png" style="">\n\nedit the logic of **Event Processors**\n\n<img src="./documentation/images/thing-it-event-processor.png" style="">\n\nand **Services** and then simulate and test the configuration before you download it to your **[thing-it-node]** deployment.\n\nConsider the [[thing-it] Documentation](http://www.thing-it.com/thing-it/index.html#/documentationPanel) to configure the scenario described above.\n\n# Taking it further\n\nIf you have the **Getting Started** example running, you may want to\n\n* understand the concepts of *[thing-it-node]* better\n* have a look at further examples e.g.\n    * [Color Changes for an RGB LED with Potentiometers](https://github.com/marcgille/thing-it-node/wiki/RGB-LED-Example)\n    * [Animation of RGB LED Color Changes using a Storyboard](https://github.com/marcgille/thing-it-node/wiki/RGB-LED-Color-Changing-Storyboard)\n    * [Recurring Service Execution with Jobs](https://github.com/marcgille/thing-it-node/wiki/Recurring-Service-Execution-with-Jobs)\n* [connect your [thing-it-node] to the Internet](https://github.com/marcgille/thing-it-node/wiki/Connecting-%5Bthing-it-node%5D-to-the-Internet)\n* [apply security measures for your [thing-it-node]](https://github.com/marcgille/thing-it-node/wiki/Using-Signature-and-Encryption-for-REST-Services-and-Web-Socket-Messages)\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '41d010c381b985c600d2c4aa4e949bea53564ec8',
17 silly publish   _id: 'thing-it-node@0.9.77' }
18 silly mapToRegistry name thing-it-node
19 silly mapToRegistry using default registry
20 silly mapToRegistry registry https://registry.npmjs.org/
21 silly mapToRegistry uri https://registry.npmjs.org/thing-it-node
22 verbose publish registryBase https://registry.npmjs.org/
23 silly publish uploading /Users/marcgille/.npm/thing-it-node/0.9.77/package.tgz
24 verbose request uri https://registry.npmjs.org/thing-it-node
25 verbose request sending authorization for write operation
26 info attempt registry request try #1 at 1:47:56 PM
27 verbose request id 5dc313e4ff6a3e09
28 http request PUT https://registry.npmjs.org/thing-it-node
29 http 409 https://registry.npmjs.org/thing-it-node
30 verbose headers { date: 'Tue, 24 Mar 2015 17:48:00 GMT',
30 verbose headers   server: 'Apache',
30 verbose headers   'content-type': 'application/json',
30 verbose headers   'cache-control': 'max-age=60',
30 verbose headers   'content-length': '17',
30 verbose headers   'accept-ranges': 'bytes',
30 verbose headers   via: '1.1 varnish',
30 verbose headers   'x-served-by': 'cache-jfk1031-JFK',
30 verbose headers   'x-cache': 'MISS',
30 verbose headers   'x-cache-hits': '0',
30 verbose headers   'x-timer': 'S1427219275.954365,VS0,VE4229',
30 verbose headers   'keep-alive': 'timeout=10, max=50',
30 verbose headers   connection: 'Keep-Alive' }
31 verbose request invalidating /Users/marcgille/.npm/registry.npmjs.org/thing-it-node on PUT
32 verbose request uri https://registry.npmjs.org/thing-it-node?write=true
33 verbose request no auth needed
34 info attempt registry request try #1 at 1:48:01 PM
35 http request GET https://registry.npmjs.org/thing-it-node?write=true
36 http 200 https://registry.npmjs.org/thing-it-node?write=true
37 verbose stack Error: cannot modify pre-existing version
37 verbose stack     at conflictError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/publish.js:184:11)
37 verbose stack     at CachingRegistryClient.putNext (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/publish.js:147:15)
37 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/publish.js:129:15
37 verbose stack     at /usr/local/lib/node_modules/npm/lib/cache/caching-client.js:52:8
37 verbose stack     at f (/usr/local/lib/node_modules/npm/node_modules/once/once.js:17:25)
37 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:73:16
37 verbose stack     at f (/usr/local/lib/node_modules/npm/node_modules/once/once.js:17:25)
37 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:262:12)
37 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:178:14)
37 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:344:22)
38 verbose pkgid thing-it-node
39 verbose cwd /Users/marcgille/git/thing-it-node
40 error Darwin 13.4.0
41 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
42 error node v0.12.0
43 error npm  v2.5.1
44 error code EPUBLISHCONFLICT
45 error publish fail Cannot publish over existing version.
45 error publish fail Update the 'version' field in package.json and try again.
45 error publish fail
45 error publish fail To automatically increment version numbers, see:
45 error publish fail     npm help version
46 verbose exit [ 1, true ]
